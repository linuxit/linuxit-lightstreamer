<?xml version="1.0"?>

<lightstreamer_conf>

<!--
    The following elements, subelements and attributes are consulted
    by Lightstreamer Server to setup its own configuration. Elements with
    an empty or blank value are ignored and considered as not defined at all. 
    Elements described as "cumulative" can be inserted multiple times in the
    same place.
    
    A very simple variable-expansion feature is available. Element or attribute
    values of the form $propname are expanded by looking for a corresponding
    JVM property (which, for instance, can be defined by adding
    -Dpropname=propvalue to the Server command line arguments in the launch
    script). If the property is not defined, then the element or attribute
    is considered as not defined at all. The variable-expansion feature is not
    available for setting the value of non-leaf elements.
    
    All the element or attribute values described as directory or file paths
    can be expressed as absolute or relative pathnames; when relative,
    they are considered as relative to the directory that contains this
    configuration file.
    Note that, on Windows, if a drive name is not specified, a double initial
    slash or backslash is needed to make a path absolute.
-->

<!--
  =====================
  LICENSE CONFIGURATION
  =====================
-->

     <!-- Mandatory. Path of the configuration file for all licensing and version
          configuration stuff. The file path is relative to the conf directory. -->
     <version_conf>./lightstreamer_version_conf.xml</version_conf>

<!--
  ===============================
  HTTP/HTTPS SERVER CONFIGURATION
  ===============================
-->

     <!-- Optional and cumulative (but at least one from <http_server> and
          <https_server> should be defined). HTTP server socket configuration.
          Multiple listening sockets can be defined, by specifying multiple
          <http_server> elements. This allows, for instance, the coexistence
          of private and public ports.
          The "name" attribute is mandatory. -->
     <http_server name="Lightstreamer HTTP Server">

        <!-- Mandatory. Listening TCP port. -->
        <port><%= @port %></port>

        <!-- Optional. Size of the system buffer for incoming TCP connections
             (backlog). Overrides the default system setting. -->
        <!--
        <backlog>50</backlog>
        -->

        <!-- Optional. Settings that allow some control over the HTTP headers
             of the provided responses. Header lines can only be added to those
             used by the Server, either by specifying their value or by copying
             them from the request.
             Multiple rules can be defined; their order is ignored.
             In any case of replicated header fields, the values are joined
             with a comma; it is assumed that multiple values are allowed for
             those fields.
             No syntax and consistency checks are performed on the resulting
             HTTP headers; only custom or non-critical fields should be used.
             The header names involved are always converted to lower case. -->
        <!--
        <response_http_headers>
        -->

             <!-- Optional and cumulative. Requests to look for any header
                  lines for the specified field name on the HTTP request header
                  and to copy them to the HTTP response header.
                  The "name" attribute is mandatory; a final ":" is optional.
                  The value should be left empty. -->
             <!--
             <echo name="cookie" />
             -->
             <!-- Optional and cumulative. Requests to add to the HTTP response
                  header a lines with the specified field name and value.
                  The "name" attribute is mandatory; a final ":" is optional.
                  -->
             <!--
             <add name="my-header">MyValue</add>
             -->

        <!--
        </response_http_headers>
        -->

        <!-- Optional. Can be used on a multihomed host to specify the IP address
             to bind the server socket to.
             The default is to accept connections on any/all local addresses. -->
        <!--
        <listening_interface>200.0.0.1</listening_interface>
        -->

        <!-- Optional. Settings that allow for better identifying the remote address
             of the connected clients. This is done by taking advantage of the
             X-Forwarded-For HTTP header; in fact, intermediate proxies usually set
             this header to supply connection routing information. -->
        <!--
        <client_identification>
        -->

            <!-- Optional. Number of entries in the X-Forwarded-For header that are
                 expected to be supplied by the intermediate nodes (e.g. reverse
                 proxies, load balancers) standing in the local environment.
                 If 1, the nearest entry in the X-Forwarded-For header will be used,
                 instead of the connection endpoint address, as the real remote address,
                 in all cases in which the client address is reported or checked;
                 if 2, the second-nearest entry will be used, and so on.
                 For logging purposes, the connection endpoint will still be written,
                 but, with a nonzero setting, the real remote address will be added,
                 when available.
                 Note that a similar correction for port and protocol is not applied,
                 hence, when reported, the port and protocol will still refer to the
                 connection endpoint.
                 Default: 0. -->
            <!--
            <skip_local_forwards>2</skip_local_forwards>
            -->
            
            <!-- Optional. If Y, causes the list of entries of the X-Forwarded-For
                 header, when available, to be added to log lines related to the
                 client activity.
                 If <skip_local_forwards> is nonzero, only the entries past the
                 reported "real" remote address are included.
                 Default: N. -->
            <!--
            <log_forwards>Y</log_forwards>
            -->

        <!--
        </client_identification>
        -->

     </http_server>

     <!-- Optional and cumulative (but at least one from <http_server> and
          <https_server> should be defined). HTTPS server socket configuration.
          Multiple listening sockets can be defined, by specifying multiple
          <https_server> elements. This allows, for instance, the coexistence
          of private and public ports.
          This also allows the use of multiple addresses for accessing the
          Server via TLS/SSL, because different HTTPS sockets can use
          different keystores. In particular, this is the case when the Server
          is behind a load balancer and Lightstreamer "control link" technique
          is used to ensure that all Requests issued by the same client are
          dispatched to the same Server instance.
          The "name" attribute is mandatory.
          HTTPS service is allowed in Presto and Vivace Editions only. -->
     <!--
     <https_server name="Lightstreamer HTTPS Server">
     -->

        <!-- Mandatory. Listening TCP port. -->
        <!--
        <port>443</port>
        -->

        <!-- Optional. Size of the system buffer for incoming TCP connections
             (backlog). Overrides the default system setting. -->
        <!--
        <backlog>50</backlog>
        -->

        <!-- Optional. Settings that allow some control over the HTTP headers
             of the provided responses. See the same element inside
             <http_server> for a description. -->
        <!--
        <response_http_headers>
             <echo name="cookie" />
             <add name="my-header">MyValue</add>
        </response_http_headers>
        -->

        <!-- Optional. Can be used on a multihomed host to specify the IP address
             to bind the server socket to.
             The default is to accept connections on any/all local addresses. -->
        <!--
        <listening_interface>200.0.0.1</listening_interface>
        -->

        <!-- Optional. Settings that allow for better identifying the remote address
             of the connected clients. See the same element inside
             <http_server> for a description. -->
        <!--
        <client_identification>
            <skip_local_forwards>2</skip_local_forwards>
            <log_forwards>Y</log_forwards>
        </client_identification>
        -->

        <!-- Mandatory. Reference to the keystore used by the HTTPS service.
             The file path is relative to the conf directory.
             Currently, only Sun/Oracle's "JKS" keystore type is supported.
             This keystore implementation has some constraints:
             - only the first certificate found in the keystore is used by the
               java TLS/SSL implementation to be sent to the Client
             - the password of the keystore and the password of the included
               certificate should be the same (hence, the <keystore_password>
               subelement refers to both).
             The <keystore_file> and <keystore_password> subelements are mandatory.
             NOTE: The "myserver.keystore" certificate, which is provided out
             of the box, is obviously not valid. In order to use it for your
             experiments, remember to add a security exception to your browser. -->
        <!--
        <keystore>
           <keystore_file>myserver.keystore</keystore_file>
           <keystore_password>mypassword</keystore_password>
        </keystore>
        -->

        <!-- Optional and cumulative. Pattern to be matched against the names
             of the enabled cipher suites in order to remove the matching ones
             from the enabled cipher suites set.
             Any pattern in java.util.regex.Pattern format can be specified.
             This allows for customization of the choice of the cipher suite
             to be used for an incoming https connection (note that reducing
             the set of available cipher suites may cause some client requests
             to be refused).
             Note that the selection is operated on the default set of the
             "enabled" cipher suites for the socket, not on the set of the
             "available" cipher suites. The default set of the "enabled" cipher
             suites is logged at startup by the LightstreamerLogger.connections.ssl
             logger at DEBUG level. -->
        <remove_cipher_suites>_DHE_</remove_cipher_suites>
        
        <!-- Optional. Request to provide the Metadata Adapter with the
             "principal" included in the client TLS/SSL certificate, when available.
             Can be one of the following:
             - Y: Upon each client connection, the availability of a client TLS/SSL
                  certificate is checked. If available, the included 
                  identification data will be supplied upon calls to notifyUser.
             - N: No certificate information is supplied to notifyUser and no
                  check is done on the client certificate.
             Note that a check on the client certificate can also be requested
             through <force_client_auth>.
             Default: N. -->
        <!--
        <use_client_auth>Y</use_client_auth>
        -->

        <!-- Optional. Request to only allow clients provided with a valid TLS/SSL
             certificate. Can be one of the following:
             - Y: Upon each client connection, a valid TLS/SSL certificate is
                  requested to the client in order to accept the connection.
             - N: No check is done on the client certificate.
             Note that a certificate can also be requested to the client as a
             consequence of <use_client_auth>.
             Default: N. -->
        <!--
        <force_client_auth>Y</force_client_auth>
        -->

        <!-- Optional and only used when at least one of <use_client_auth> and
             <force_client_auth> is set to Y. Reference to a keystore to be used
             by the HTTPS service to accept client certificates.
             It can be used to supply client certificates that should be
             accepted, in addition to those with a valid certificate chain,
             for instance while testing with self-signed certificates.
             The file path is relative to the conf directory.
             Currently, only Sun/Oracle's "JKS" keystore type is supported.
             Note that the password to be supplied refers to the whole keystore,
             not to the various certificates.
             The <truststore_file> and <truststore_password> subelements are
             mandatory. -->
        <!--
        <truststore>
           <truststore_file>myserver.truststore</truststore_file>
           <truststore_password>mypassword</truststore_password>
        </truststore>
        -->

     <!--
     </https_server>
     -->

     <!-- GLOBAL SOCKET SETTINGS -->

     <!-- Mandatory. Longest inactivity time accepted while waiting for a slow
          request to be received. If this value is exceeded, the socket is
          closed. Reusable HTTP connections are also closed if they are not
          reused for longer than this time.
          The time actually considered may be approximated and may be a few
          seconds higher, for internal performance reasons.
          This setting also applies to TLS/SSL handshaking operations; both read and
          write operations are affected in this case. -->
     <read_timeout_millis>20000</read_timeout_millis>

     <!-- Optional. Maximum length in bytes accepted for a request.
          For an HTTP GET request, the limit applies to the whole request,
          including the headers.
          For an HTTP POST request, the limit applies to the header part and the
          body part separately.
          For a request over a WebSocket, the limit applies to the request
          message payload. -->
     <request_limit>50000</request_limit>

     <!-- Optional. Longest operation time accepted while writing data on a
          socket. If this value is exceeded, the socket is closed. Note that
          this may also affect very slow clients.
          The time actually considered may be approximated and may be a few
          seconds higher, for internal performance reasons. -->
     <!--
     <write_timeout_millis>20000</write_timeout_millis>
     -->

     <!-- Optional. Enabling the use of the full HTTP 1.1 syntax for all the
          responses, upon HTTP 1.1 requests. Can be one of the following:
          - Y: HTTP 1.1 is always used, when possible.
          - N: HTTP 1.0 is always used; this is possible for all HTTP requests,
               but it will prevent WebSocket support.
          Default: HTTP 1.0 is used, unless HTTP 1.1 is required in order to
          support specific response features.
     -->
     <use_http_11>Y</use_http_11>
     
     <!-- Optional. WebSocket support configuration. The support is enabled
          by default. -->
     <websocket>

        <!-- Optional. Enabling of the WebSocket support.
             Can be one of the following:
             - Y: the Server accepts requests for initiating a WebSocket
                  interaction through a custom protocol;
             - N: the Server refuses requests for WebSocket interaction.
             Default: Y. -->
        <!--
        <enabled>N</enabled>
        -->

        <!-- Optional. Maximum time the Server is allowed to wait before
             answering to a client "ping" request. In case a client sends
             very frequent "ping" requests, only the "pong" associated to
             the most recent request received is sent, while the previous
             requests will be ignored.
             Note that the above is possible also when 0 is specified.
             Default: 0. -->
        <!--
        <max_pong_delay_millis>1000<max_pong_delay_millis/>
        -->

        <!-- Optional. Maximum time the Server is allowed to wait for the
             client "close" frame, in case the Server is sending its own
             "close" frame first, in order to try to close the connection
             in a clean way.
             If not specified, no timeout is set and the global
             <read_timeout_millis> limit applies. -->
        <!--
        <max_closing_wait_millis>1000</max_closing_wait_millis>
        -->

        <!-- Optional. Maximum payload size allowed for an outbound frame.
             When larger updates have to be sent, the related WebSocket
             messages will be split into multiple frames.
             A lower limit for the setting may be enforced by the Server.
             Default: 16384. -->
        <!--
        <max_outbound_frame_size>4096</max_outbound_frame_size>
        -->

     </websocket>

<!--
  ======================
  SECURITY CONFIGURATION
  ======================
-->

     <!-- Optional. Disabling of the protection for JavaScript pages, supplied
          by the Server, that carry user data. The protection prevents such
          pages from being imported in a <script> block and, as a consequence,
          from being directly executed within a hosting page regardless of its
          origin.
          This protection allows the Server to fully comply with the
          prescriptions to prevent the so-called "JavaScript Hijacking".
          Can be one of the following:
          - Y: the protection is enabled.
          - N: the protection is disabled.
               It can be set in order to support communication between the
               application front-end pages and Lightstreamer Server in specific
               use cases; see the Client Guide in the JavaScript SDK for details.
               It can also be set in order to ensure compatibility with Web
               Client Library version 4.1 build 1308 or previous.
               Note, however, that basic protection against JavaScript
               Hijacking can still be granted, simply by ensuring that request
               authorization is never based on information got from the request
               cookies. This already holds for any session-related request other
               than session-creation ones, for which the request URL is always
               checked against the Server-generated session ID.
               For session-creation requests, this depends on the Metadata
               Adapter implementation, but can be enforced by setting
               <forward_cookies> to N.
          Default: Y. -->
     <use_protected_js>N</use_protected_js>
     
     <!-- Optional. Use this setting to enable the forwarding of the cookies to
          the Metadata Adapter through the httpHeaders argument of the "notifyUser"
          method.
          Please note that in any case cookies should not be used to authenticate
          users, otherwise, having <use_protected_js> set to N and/or a too permissive
          policy in the <cross_domain_policy> will expose the server to CSRF attacks.
          Can be of the following:
          - Y: cookies are forwarded to the Metadata Adapter.
          - N: cookies are hidden from the Metadata Adapter.
          Default: N. -->
     <forward_cookies>N</forward_cookies>

     <!-- Mandatory. List of origins to be allowed by the browsers to consume
          responses to requests sent to this Server through cross-origin XHR or
          through WebSockets; in fact, when a requesting page asks for streaming
          data in this way, the browser should specify the page origin through the
          "Origin" HTTP header, to give the Server a chance to accept or refuse
          the request.
          This is the most common way streaming data is requested by the JavaScript
          Client Library; see the Client Guide in the JavaScript SDK for details
          on all the possible use cases.
          If a request origin is not matched against any of the configured rules,
          the request will not be denied (i.e.: a 200 OK will be returned) but the
          response body will be left empty, in accordance with the CORS specifications.
          If no origin is specified by the user-agent, the request will always be
          accepted.
          Note that sending the Origin header is a client-side duty. In fact,
          most modern browsers, upon a request for a cross-origin XHR or WebSocket
          by a page, will send the Origin header, while older browsers will directly
          fail to send the request. Non-browser clients usually don't have to perform
          origin checks; so they don't send the Origin header and thus their requests
          are always authorized.
          In case an HTTP OPTIONS request is sent to authorize future requests, 
          the server allows the client to store the result of such OPTIONS
          request for a number of seconds configured in the options_max_age
          attribute of this element (default is 3600). Thus a previously authorized 
          client may not give up its authorization, even if the related origin is 
          removed from the list and the server is restarted, until its authorization 
          expires. -->
     <cross_domain_policy options_max_age="3600" >

        <!-- Optional and cumulative.  Declaration of an Origin allowed
             to consume responses to cross-origin requests.
             Each <allow_access_from> element will define a rule against which
             Origin headers will be checked.
             Each rule must define a scheme, a host and a port in the following way:
             - scheme: it can be http, https or *, the latter enabling both http and
               https scheme to be accepted.
             - host: a valid host name, IPv4 or IPv6 representing an authorized Origin.
               Also a * is accepted with the meaning of "any host or IP".
               If a host name is specified it can be prefixed with a wildcard as long
               as at least the second level domain is explicitly specified (i.e.:
               *.my-domain.com and *.sites.my-domain.com are valid entries 
               while *.com is not)
             - port: a valid port or * to specify any port.
        -->
        <allow_access_from scheme="*" host="*" port="*" /> 
        <!--
          <allow_access_from scheme="https" host="www.my-domain.com" port="443" /> 
        -->
        <!--
          <allow_access_from scheme="*" host="*.my-domain.com" port="*" /> 
        -->
        <!--
          <allow_access_from scheme="*" host="192.168.0.101" port="*" /> 
        -->
        <!--
          <allow_access_from scheme="*" host="2001:0db8:aaaa:0000:0000:dddd:eeee:0000" port="*" /> 
        -->
        <!--
          <allow_access_from scheme="*" host="2001:0db8:aaaa::dddd:eeee:0" port="*" /> 
        -->

     </cross_domain_policy>
     
     <!-- Optional and cumulative. Origin domain or subdomain to be allowed
          by the browsers to access data on HTML pages supplied by this Server;
          see the Client Guide in the JavaScript SDK for details on which
          use cases involve accessing data through HTML pages.
          In this kind of requests, the requesting page should be allowed by
          the browser to access data contained in the Server-originated page
          only if both pages declare a common subdomain. So, the page should
          declare a subdomain as its "document.domain" property and will ask
          the Server to declare the same subdomain on the response page.
          In that case, the Server will be allowed to set the requested
          subdomain as the "document.domain" property of the data page only
          if configured here, otherwise the whole request will be refused.
          On the other hand, if no <allowed_domain> element is configured,
          then this check is disabled. Note that, in any case, the consistency
          of the declared subdomain with the url used to request the data page
          must be ensured by the browser.
          If the requesting page doesn't specify any subdomain for the response,
          the request will always be allowed; in this case, a same-domain access
          to the Server data page will be performed by the browser. -->
     <!--
     <allowed_domain>my-domain.com</allowed_domain>
     -->
     <!--
     <allowed_domain>my-alt-domain.com</allowed_domain>
     -->

     <!-- Optional. Server identification policy to be used for all server
          responses. Upon any HTTP request, the Server identifies itself
          through the "Server" HTTP response header. However, omitting version
          information may make external attacks more difficult.
          Can be one of the following:
          - FULL: the Server identifies itself as:
                  Lightstreamer/X.Y.Z build BBBB (Lightstreamer Push Server - www.lightstreamer.com) EEEEEE edition
          - MINIMAL: the Server identifies itself as:
                  Lightstreamer
          Default: FULL. -->
     <!--
     <server_tokens>MINIMAL</server_tokens>
     -->

<!--
  ====================================
  LOGGING AND MANAGEMENT CONFIGURATION
  ====================================
-->

     <!-- Mandatory. Path of the configuration file for the internal logback-based
          logging system. The file path is relative to the conf directory. -->
     <logback_properties>./lightstreamer_log_conf.xml</logback_properties>

     <!-- Optional. A set of Clients whose activity is not to be logged. -->
     <no_logging_ip>

        <!-- Cumulative. IP address of a Client to exclude from logging. -->
        <!--
        <ip_value>200.0.0.10</ip_value>
        -->

     </no_logging_ip>

     <!-- Optional. Enabling of the inclusion of the user password in the log
          of the client requests for new sessions, performed by the
          "LightstreamerLogger.requests" logger at INFO level.
          Can be one of the following:
          - Y: the whole request is logged;
          - N: the request is logged, but for the value of the LS_password
               request parameter.
          Note that the whole request may still be logged by some loggers,
          but only at DEBUG level, which is never enabled in the default
          configuration.
          Default: N. -->
     <!--
     <show_password_on_request_log>Y</show_password_on_request_log>
     -->

     <!-- Optional. Threshold time for long Adapter call alerts.
          All Data and Metadata Adapter calls should perform as fast
          as possible, to ensure that client requests are accomplished quickly.
          Slow methods may also require that proper thread pools are configured.
          The most critical calls are monitored by Kernel code and a warning
          is logged whenever their execution takes more than this time.
          A 0 value disables the check.
          Default: 1000. -->
     <unexpected_wait_threshold_millis>0</unexpected_wait_threshold_millis>

     <!-- Optional. Threshold wait time for a task enqueued for running on any
          of the internal thread pools.
          The current wait time is periodically sampled by the Server Monitor
          on each pool and, whenever it exceeds this threshold on a pool,
          a warning is logged. Note that warning messages can be issued
          repeatedly. A 0 value disables the check.
          Default: 10000. -->
     <!--
     <max_task_wait_millis>0</max_task_wait_millis>
     -->

     <!-- Mandatory. Sampling time for internal load statistics (Server
          Monitor). Statistics can be logged or subscribed to through the
          internal monitoring Adapter Set. -->
     <collector_millis>2000</collector_millis>

     <!-- Optional. JMX preferences and external access configuration.
          Full JMX features are restricted to Vivace Edition;
          in all other editions, only the Server shutdown operation
          via JMX is allowed. -->
     <jmx>

        <!-- Optional. Enables the standard Sun/Oracle's HTML adaptor. This adaptor
             behaves as a web server and allows a basic view of the installed
             MBeans.
             The connector is supported by the Server only if Sun/Oracle's HTML
             adaptor implementation library is added to the Server classpath;
             see README.TXT in the JMX SDK for details.
             In any edition other than Vivace, only the "Server" MBean is supplied
             and only the Server shutdown operation is available. -->
        <!--
        <html_adaptor>
        -->

            <!-- Mandatory. TCP port on which the standard Sun/Oracle's HTML adaptor
                 will be listening. -->
            <!--
            <port>6600</port>
            -->

            <!-- Optional. Enabling of the HTML adaptor access without credentials.
                 Can be one of the following:
                 - Y: requests to the HTML adaptor are always allowed;
                 - N: requests to the HTML adaptor are subject to user authentication;
                      the allowed users are set in the "user" elements.
                 Default: N. -->
            <!--
            <public>N</public>
            -->

            <!-- Optional and cumulative (but ineffective if "public" is set to "Y").
                 Credentials of the users enabled to access the HTML adaptor.
                 Both "id" and "password" attributes are mandatory. -->
            <!--
            <user id="user_changeme" password="password_changeme" />
            <user id="other_user" password="other_password" />
            -->

        <!--
        </html_adaptor>
        -->

        <!-- Mandatory (if you wish to use the provided "stop" script).
             Enables the standard RMI connector.
             The remote MBean server will be accessible through this url:
             "service:jmx:rmi:///jndi/rmi://<host>:<port>/lsjmx".
             In any edition other than Vivace, only the "Server" MBean is supplied
             and only the Server shutdown operation is available.
             The JVM platform MBean server (available since java 1.5) is also
             exposed and it is accessible through the url:
             "service:jmx:rmi:///jndi/rmi://<host>:<port>/jmxrmi".
             Note that the configuration of the connector applies to both cases;
             hence, access to the JVM platform MBean server from this connector
             is not configured through the "com.sun.management.jmxremote" JVM
             properties. -->
        <rmi_connector>
        
            <!-- Mandatory. TCP port on which the RMI connector will be
                 available. This is the port that has to be specified in the
                 client access url.
                 The optional "ssl" attribute, when set to "Y", enables TLS/SSL
                 communication. Note that this case is not managed by some JMX
                 clients, like jconsole. TLS/SSL is only available in Presto and
                 Vivace editions. -->
            <port ssl="N"><%= @rmi_port %></port>

            <!-- Optional. TCP port that will be used by the RMI connector for
                 its own communication stuff. The port has not to be specified
                 in the client access url, but it may have to be considered for
                 firewall settings.
                 The optional "ssl" attribute, when set to "Y", enables TLS/SSL
                 communication by the connector; TLS/SSL at this level is supported
                 by some JMX clients, like jconsole. If omitted, the same setting
                 used for <port> is considered. TLS/SSL is only available in Presto
                 and Vivace editions. 
                 Default: the same as configured in <port>. -->
            <!--
            <data_port ssl="N">4444</data_port>
            -->

            <!-- Optional. A hostname by which the RMI Server can be reached from
                 all the clients. In fact, the RMI Connector, for its own
                 communication stuff, does not use the hostname specified in the
                 client access url, but needs an explicit server-side configuration.
                 Default: any setting provided to the "java.rmi.server.hostname"
                 JVM property. -->
            <!--
            <hostname>push.mycompany.com</hostname>
            -->

            <!-- Optional. Can be used on a multihomed host to specify the IP
                 address to bind the HTTP/HTTPS server sockets to, for all the
                 communication.
                 This setting is supported only if a <data_port> setting different
                 than the <port> setting is supplied.
                 Note that, when a listening interface is configured and depending
                 on the local network configuration, specifying a suitable
                 <hostname> setting may be needed to make the connector accessible,
                 even from local clients.
                 The default is to accept connections on any/all local addresses. -->
            <!--
            <listening_interface>200.0.0.1</listening_interface>
            -->

            <!-- Optional. Reference to the keystore to be used in case TLS/SSL
                 is enabled for part or all the communication. Note that TLS/SSL
                 is only available in Presto and Vivace editions. 
                 Currently, only Sun/Oracle's "JKS" keystore type is supported.
                 This keystore implementation has some constraints:
                 - only the first certificate found in the keystore is sent to
                   the Client;
                 - the password of the keystore and the password of the included
                   certificate should be the same (hence, the <keystore_password>
                   subelement refers to both).
                 The <keystore_file> and <keystore_password> subelements are
                 mandatory.
                 NOTE: The "myserver.keystore" certificate, which is provided
                 out of the box, is obviously not valid. In order to use it for
                 your experiments, remember to configure it as a truststore in
                 the JMX client.
                 Default: any settings provided to the "javax.net.ssl.keyStore"
                 and "javax.net.ssl.keyStorePassword" JVM properties. -->
            <!--
            <keystore>
               <keystore_file>myserver.keystore</keystore_file>
               <keystore_password>mypassword</keystore_password>
            </keystore>
            -->

            <!-- Optional and cumulative. Pattern to be matched against the
                 names of the enabled cipher suites in order to remove the
                 matching ones from the enabled cipher suites set to be used
                 in case TLS/SSL is enabled for part or all the communication.
                 Note that TLS/SSL is only available in Presto and Vivace editions.
                 See notes for <remove_cipher_suites> under <https_server>. -->
            <remove_cipher_suites>_DHE_</remove_cipher_suites>

            <!-- Optional. Enabling of the RMI connector access without credentials.
                 Can be one of the following:
                 - Y: requests to the RMI connector are always allowed;
                 - N: requests to the RMI connector are subject to user authentication;
                      the allowed users are set in the "user" elements.
                 Default: N. -->
            <public>N</public>

            <!-- Optional and cumulative (but ineffective if "public" is set to "Y").
                 Credentials of the users enabled to access the RMI connector.
                 Both "id" and "password" attributes are mandatory.
                 If "public" is set to "N", at least one set of credentials should
                 be supplied in order to allow access through the connector.
                 This is also needed if you wish to use the provided "stop" script;
                 the script will always use the first user supplied. -->
            <user id="<%= @rmi_user %>" password="<%= @rmi_passwd %>" />
            <!--
            <user id="other_user" password="other_password" />
            -->

        </rmi_connector>
        
        <!-- Optional. Enables Sun/Oracle's JMXMP connector.
             The connector is supported by the Server only if Sun/Oracle's JMXMP
             implementation library is added to the Server classpath;
             see README.TXT in the JMX SDK for details.
             The remote server will be accessible through the url:
             "service:jmx:jmxmp://<host>:<port>".
             In any edition other than Vivace, only the "Server" MBean is supplied
             and only the Server shutdown operation is available. -->
        <!--
        <jmxmp_connector>
        -->

            <!-- Mandatory. TCP port on which Sun/Oracle's JMXMP connector will be
                 listening. This is the port that has to be specified in the
                 client access url. -->
            <!--
            <port>9999</port>
            -->

        <!--
        </jmxmp_connector>
        -->
        
        <!-- Optional. Disabling of the availability of session-related mbeans,
             the ones identified by type="Session". Can be one of the following:
             - Y: no mbeans of type "Session" are generated;
             - N: for each active session, a corresponding mbean of type "Session"
                  is available.
             The support for session-related mbeans can pose a significant
             overload on the Server when many sessions are active and many of them
             are continuously created and closed.
             Default: N. -->
        <!--
        <disable_session_mbeans>Y</disable_session_mbeans>
        -->
        
     </jmx>

     <!-- Mandatory. Configuration of the internal Data and Metadata Adapters
          that are used by the embedded Monitor Console to provide monitoring
          statistics. This is accomplished through a preinstalled Adapter Set,
          which is called "MONITOR".
          Note that an internal monitoring Data Adapter instance can also be
          embedded in any custom Adapter Set, by specifying "MONITOR" in place
          of the Data Adapter class name. For a listing of the supplied items,
          see the General Concepts document.
          The following elements configure access restrictions to the "MONITOR"
          Adapter Set. The same restrictions also apply to the embedded Monitor
          Console pages.
          Note that any access restrictions to a monitoring Data Adapter
          instance embedded in a custom Adapter Set must be managed by the
          custom Metadata Adapter included. -->
     <monitor_provider>

        <!-- Optional. Enabling of the access to the "MONITOR" Adapter Set
             without credentials.
             Can be one of the following:
             - Y: requests to the monitoring Adapter Set are always allowed;
             - N: requests to the monitoring Adapter Set must specify the fields
                  LS_user and LS_password and they must match the credentials
                  set in the "user" elements.
             Default: N. -->
        <public><%= @monitor_public %></public>

        <!-- Optional and cumulative (but ineffective if "public" is set to "Y").
             Credentials of the users enabled to access to the "MONITOR"
             Adapter Set.
             Only alphanumeric characters and the characters * @ - _ + . /
             are supported in user and password names.
             Both "id" and "password" attributes are mandatory. -->
<% if @monitor_public == 'Y' -%>
        <!--
        <user id="put_your_monitor_user_here" password="put_your_monitor_password_here" />
        -->
        <!--
        <user id="other_user" password="other_password" />
        -->
<% else -%>
        <user id="<%= @monitor_user %>" password="<%= @monitor_passwd %>" />
<% end -%>

        <!-- Optional. Enabling of the access to the "MONITOR" Adapter Set
             through all server sockets. Can be one of the following:
             - Y: requests to the "MONITOR" Adapter Set can be issued through
                  all the defined server sockets;
             - N: requests to the "MONITOR" Adapter Set can be issued only
                  through the server sockets specified in the "available_on_server"
                  elements.
             Default: N. -->
        <available_on_all_servers>Y</available_on_all_servers>

        <!-- Optional and cumulative (but ineffective if "available_on_all_servers"
             is set to "Y").
             Specify, through the "name" attribute, one of the currently
             defined servers for which requests to the "MONITOR" Adapter Set can
             be issued.
             If the name has been assigned to more than one server socket,
             then the setting applies to all of them. -->
        <!--
        <available_on_server name="Lightstreamer HTTP Server" />
        -->

        <!-- Optional. Enabling of the reverse lookup on Client IPs and inclusion
             of the Client hostnames while monitoring client activity.
             This setting affects the monitoring Data Adapter and also affects
             any instance of the monitoring Data Adapter embedded in a custom
             Adapter Set.
             Can be one of the following:
             - Y: the Client hostname is determined on Client activity
                  monitoring; note that the determination of the client hostname
                  may be heavy for some systems;
             - N: no reverse lookup is performed and the Client hostname is not
                  included on Client activity monitoring.
             Default: N. -->
        <!--
        <enable_hostname_lookup>Y</enable_hostname_lookup>
        -->

     </monitor_provider>

     <!-- Optional. Configuration of the "/lightstreamer/healthcheck" request
          url, which allows a load balancer to test for Server responsiveness
          to external requests. The Server should always answer to the
          request with the "OK\r\n" content string. The Server may log
          further information to the dedicated "LightstreamerHealthCheck"
          logger. -->
     <healthcheck>

        <!-- Optional. Enabling of the healthcheck url on all server sockets.
             Can be one of the following:
             - Y: healthcheck requests can be issued through all the defined
                  server sockets;
             - N: healthcheck requests can be issued only through the server
                  sockets specified in the "available_on_server" elements.
             Default: N. -->
        <available_on_all_servers>N</available_on_all_servers>

        <!-- Optional and cumulative (but ineffective if "available_on_all_servers"
             is set to "Y").
             Specify, through the "name" attribute, one of the currently
             defined servers for which healthcheck requests can be issued.
             If the name has been assigned to more than one server socket,
             then the setting applies to all of them. -->
        <!--
        <available_on_server name="Lightstreamer HTTP Server" />
        -->

     </healthcheck>

<!--
  =========================
  ENVIRONMENT CONFIGURATION
  =========================
-->

     <!-- Optional. Path of the file system directory that contains all the
          Adapter Set configuration. The path is relative to the conf directory.
          Default: ../adapters -->
     <!--
     <adapters_dir>./adapters</adapters_dir>
     -->

     <!-- Optional. Path of the file system directory that contains the Java
          classes and JAR files shared by the Adapters; they must be placed
          under the "classes" and "lib" subdirectories, respectively.
          The path is relative to the conf directory.
          Default: ../shared -->
     <!--
     <shared_dir>./shared</shared_dir>
     -->

<!--
  ==========================
  PUSH SESSION CONFIGURATION
  ==========================
-->

     <!-- Mandatory. HTTP content-length to set for HTTP streaming responses;
          when the content-length is reached, the connection is closed but the
          session remains active and the Client can continue listening to the
          UpdateEvents by binding the session to another connection.
          The setting is also used as the maximum length allowed for poll
          responses; if more data were available, they would be kept for the next
          poll request.
          The Setting is not used for streaming responses over WebSockets.
          The optimal content-length for web clients (i.e. browser user agents)
          should not be too high, in order to reduce the maximum allocated memory
          on the client side. Also note that some browsers, in case of a very
          high content-length, may reduce streaming capabilities (noticed with
          IE8 and 4GB).
          This setting can be overridden by the Clients (some LS client libraries
          actually set their own default).
          The lowest possible value for the content-length is decided by the Server,
          so as to allow the connection to send a minimal amount of data. -->
     <content_length>

        <!-- Mandatory. Define the HTTP content-length to be used for streaming
             responses (and as an upper limit for polling responses). -->
        <default>500000</default>

        <!-- Optional and cumulative. Through the "value" attribute, defines the
             HTTP content-length to be used for stream/poll responses (overriding
             the setting in "default") when all the conditions specified through
             the subelements are met.
             Multiple occurrences of "special_case" are evaluated in sequence,
             until one is enabled. -->
        <!--
        <special_case value="100000">
        -->
            <!-- Mandatory and cumulative. Defines a condition on the user-agent
                 supplied with the request, which should include the string
                 specified through the "contains" attribute. -->
            <!--
            <user_agent contains="Symbian OS" />
            -->
        <!--
        </special_case>
        -->

     </content_length>

     <!-- Optional. Maximum lifetime allowed for single HTTP streaming responses;
          when this timeout expires, the connection is closed, though the
          session remains active and the Client can continue listening to the
          UpdateEvents by binding the session to another connection.
          Setting this timeout is not needed in normal cases; it is provided
          just in case any user agent or intermediary node turned out to be
          causing issues on very long-lasting HTTP responses.
          The Setting is not applied to polling responses and to streaming
          responses over WebSockets.
          If not specified, no limit is set; the streaming session duration
          will be limited only by the "content_length" setting and, at least,
          by the keep-alive message activity. -->
     <!--
     <max_streaming_millis>480000</max_streaming_millis>
     -->

     <!-- Optional. Enabling the use of the "chunked" transfer encoding,
          as defined by the HTTP 1.1 specifications, for sending the response
          body on HTTP streaming connections. Can be one of the following:
          - Y: The "chunked" transfer encoding will be used anytime an
               HTTP 1.1 response is allowed (see "use_http_11").
          - N: Causes no transfer encoding (that is, the "identity" transfer
               encoding) to be used for all kinds of responses.
          Though with "chunked" transfer encoding the content-length header
          is not needed on the HTTP response header, configuring a content
          length for the Server is still mandatory and the setting is obeyed
          in order to put a limit to the response length.
          Default: The "chunked" transfer encoding will be used only when
               an HTTP 1.1 response is being sent (see "use_http_11"). -->
     <use_chunked_encoding>Y</use_chunked_encoding>

     <!-- Optional. Enabling the use of the "gzip" content encoding,
          as defined by the HTTP 1.1 specifications, for sending the resource
          contents on HTTP responses; compression is currently not supported
          for responses over WebSockets. Can be one of the following:
          - Y: Gzip compression will be used anytime an HTTP 1.1 response
               is allowed (for streaming responses, the "chunked" transfer
               encoding should also be allowed), provided that the client has
               declared to accept it through the proper http request headers.
          - N: Causes no specific content encoding to be applied for all kinds
               of contents.
          Streaming responses are compressed incrementally.
          The use of compression may relieve the network level at the expense
          of the Server performance. Note that bandwidth control and output
          statistics are still based on the non-compressed content.
          Default: Gzip compression will not be used, unless using it is
               recommended in order to handle special cases (and provided that
               all the conditions for compression are met; see case Y above). -->
     <!--
     <use_compression>N</use_compression>
     -->

     <!-- Optional. Size of the response body below which compression is not
          applied, regardless of the "use_compression" setting, as we guess
          that no benefit would come. It is not applied to streaming responses,
          which are compressed incrementally.
          Default: 1024 bytes. -->
     <!--
     <compression_threshold>0</compression_threshold>
     -->

     <!-- Optional. Maximum size for any ItemEventBuffer. It applies to RAW and
          COMMAND mode and to any other case of unfiltered subscription.
          For filtered subscriptions, it poses an upper limit on the size
          that can be set by the Metadata Adapter or requested through the
          subscription parameters.
          Setting a very low value prevents growing memory usage with many
          unfiltered-like subscriptions and fast producing items / slow clients.
          As lost updates are logged on the LightstreamerLogger.pump logger at
          INFO level, with such a setting, it is advisable setting the logger
          at WARN level and resorting to the Internal Monitor for aggregate
          statistics. -->
     <max_buffer_size>1000</max_buffer_size>

     <!-- Mandatory. Longest time a disconnected session can be kept alive
          while waiting for the Client to rebind such session to another
          connection, in order to make up for client or network latencies.
          Note that the wait is not performed when the session is being closed
          because of an explicit disconnection by the client. -->
     <session_timeout_millis>10000</session_timeout_millis> 
 
     <!-- Optional. Longest time the subscriptions currently in place on a
          session can be kept active after the session has been closed,
          in order to prevent unsubscriptions from the Data Adapter that would
          be immediately followed by new subscriptions in case the client
          were just refreshing the page.
          As a consequence of this wait, some items might temporarily appear
          as being subscribed to, even if no session were using them.
          If a session is closed after being kept active because of the
          "session_timeout_millis" setting, the accomplished wait is considered
          as valid also for the subscription wait purpose.
          Default: the time configured for "session_timeout_millis". -->
     <subscription_timeout_millis>5000</subscription_timeout_millis> 

     <!-- Optional. Timeout used to ensure the proper ordering of client-sent
          messages, within the specified message sequence, before sending them
          to the Metadata Adapter through notifyUserMessage.
          In case a client request is late or does not reach the Server,
          the next request may be delayed until this timeout expires, while
          waiting for the late request to be received; then, the next request
          is forwarded and the missing one is discarded with no further recovery
          and the client application is notified.
          Message ordering does not concern the old synchronous interfaces for
          messare submission. Ordering and delaying also does not apply to the
          special "UNORDERED_MESSAGES" sequence, although, in this case,
          discarding of late messages is still possible.
          A high timeout (as the default one) reduces the discarded messages,
          by allowing the client library to reissue requests that have got lost.
          A low timeout reduces the delays of subsequent messages in case
          a request has got lost and can be used if message dropping is
          acceptable.
          Default: 30000. -->
     <!--
     <missing_message_timeout_millis>1000</missing_message_timeout_millis>
     -->

     <!-- Optional. Configuration of the special handling of the unchanged
          values when sending updates to the clients.
          Can be one of the following:
          - Y: the Server is allowed to perform "delta delivery"; it will send
               special notifications to notify the clients of values that are
               unchanged with respect to the previous update for the same item;
          - N: the Server always sends to the clients the actual values in the
               updates; note that any missing field in an update for an item
               in MERGE mode will be filled with the old value before being sent,
               hence the old value will be resent anyway.
          Checking for unchanged values and sending special notifications for
          them is in general more efficient than always sending the values.
          On the other hand, checking for unchanged values puts heavier memory
          and processing requirements on the Server.
          In case "delta delivery" is adopted, the burden of recalling the
          previous values is left to the clients.
          This holds for clients based on the "SDK for Generic Client
          Development" (available for Presto and Vivace editions).
          This also holds for clients based on some old versions of the provided
          SDK libraries, which just forward the special unchanged notifications
          through the API interface. Old versions of the .NET, Java SE (but for
          the ls_proxy interface layer), Native Flex and Java ME libraries (all
          of them available for Presto and Vivace editions) share this behaviour.
          Forcing a redundant delivery would simplify the client code in all
          the above cases.
          Default: Y. -->
     <!--
     <delta_delivery>N</delta_delivery>
     -->
     
     <!-- Optional. Configuration of the update management for items subscribed to
          in COMMAND mode with unfiltered dispatching, with regard to updates
          pertaining to different keys.
          Can be one of the following:
          - Y: the order in which updates are received from the Data Adapter is
               preserved when sending updates to the clients; in this case, any
               frequency limits imposed by editions other than Vivace are applied
               to the whole item and may result in a very slow update flow;
               this was the default behavior before Server 4.0 version.
          - N: provided that no updates are lost, the Server can send enqueued
               updates in whichever order; it must only ensure that, for updates
               pertaining to the same key, the order in which updates are received
               from the Data Adapter is preserved; in this case, any frequency
               limits imposed by editions other than Vivace are applied for each
               key independently.
          No item-level choice is possible. However, setting this flag as Y
          allows for backward compatibility to versions before 4.0, if needed.
          Default: N. -->
     <!--
     <preserve_unfiltered_command_ordering>Y</preserve_unfiltered_command_ordering>
     -->

     <!--
          Optional. Policy to be adopted for the handling of session-related
          internal buffers.
          Can be one of the following:
          - Y: internal buffers used for composing and sending updates are kept
               among session-related data throughout the life of each session;
               this speeds up update management;
          - N: internal buffers used for composing and sending updates are
               allocated and deallocated on demand; this minimizes the 
               requirements in terms of permanent per-session memory and may be
               needed in order to handle a very high number of concurrent
               sessions, provided that the per-session update activity is low.
          Default: The current setting of "delta_delivery" is used.
          In fact, setting "delta_delivery" as N may denote the need for
          reducing permanent per-session memory. -->
     <!--
     <reuse_pump_buffers>Y</reuse_pump_buffers>
     -->

     <!-- STREAMING MODE -->

     <!-- Optional. Size to be set for the socket TCP send buffer in case of
          streaming connections.
          The factory setting is a compromise between throughput, data aging and
          memory usage; a larger value may increase throughput in sessions with
          a high update activity and a high roundtrip time; however, in case of
          sudden network congestion, the queue of outbound updates would need
          longer to be cleared, imposing a significant delay on the updates
          (hopefully, in case of a persistent network congestion, the buffer
          would be reduced by the TCP itself).
          The factory setting is very small and it is comparable with a typical
          packet size; there shouldn't be any need for an even smaller value;
          also note that the system may force a minimum size.
          Default: 1600. -->
     <!--
     <sendbuf>5000</sendbuf>
     -->

     <!-- Optional. Longest delay that the Server is allowed to apply to
          outgoing updates in order to collect more updates in the same
          packet. This value sets a trade-off between Server scalability
          and maximum data latency. It also sets an upper bound to the
          maximum update frequency for items not subscribed with unlimited
          or unfiltered frequency.
          Default: 0. -->
     <max_delay_millis>30</max_delay_millis>

     <!-- Mandatory. Longest write inactivity time allowed on the socket.
          If no updates have been sent after this time, then a small
          keep-alive message is sent.
          Note that the Server also tries other types of checks of the
          availability of current sockets, which don't involve writing data
          to the sockets.
          This setting can be overridden by the Client.
          The optional "randomize" attribute, when set to Y, causes keepalives
          immediately following a data event to be sent after a random, shorter
          interval (possibly even shorter than the "min_keepalive_millis"
          setting). This can be useful if many sessions subscribe to the same
          items and updates for these items are rare, to avoid that also the
          keepalives for these sessions occur at the same times. -->
     <default_keepalive_millis randomize="N">5000</default_keepalive_millis>

     <!-- Mandatory. Lower bound to the keep-alive time requested by a Client.
          Must be lower than the "default_keepalive_millis" setting. -->
     <min_keepalive_millis>1000</min_keepalive_millis>

     <!-- Mandatory. Upper bound to the keep-alive time requested by a Client.
          Must be greater than the "default_keepalive_millis" setting. -->
     <max_keepalive_millis>30000</max_keepalive_millis>

     <!-- SMART-POLLING MODE -->

     <!-- Mandatory. Longest time a client is allowed to wait, after receiving
          a poll answer, before issuing the next poll request. Note that,
          on exit from a poll request, a session has to be kept active, while
          waiting for the next poll request.
          The session keeping time has to be requested by the Client within
          a poll request, but the Server, within the response, can notify a
          shorter time, if limited by this setting.
          The session keeping time for polling may cumulate with the keeping
          time before disconnection, as set by "session_timeout_millis". -->
     <max_polling_millis>15000</max_polling_millis>

     <!-- Mandatory. Longest inactivity time allowed on the socket while waiting
          for updates to be sent to the client through the response to an
          asynchronous poll request.
          If this time elapses, the request is answered with no data, but the
          client can still rebind to the session with a new poll request.
          A shorter inactivity time limit can be requested by the client.
          The optional "randomize" attribute, when set to Y, causes polls
          immediately following a data event to wait for a random, shorter
          inactivity time. This can be useful if many sessions subscribe to
          the same items and updates for these items are rare, to avoid that
          also the following polls for these sessions occur at the same times. -->
     <max_idle_millis randomize="N">30000</max_idle_millis>

     <!-- Optional. Shortest time allowed between consecutive polls on a
          session. If the client issues a new polling request and less than
          this time has elapsed since the STARTING of the previous polling
          request, the polling connection is kept waiting until this time
          has elapsed.
          In fact, neither a "min_polling_millis" nor a "min_idle_millis"
          setting are provided, hence a client is allowed to request 0 for both,
          so that the real polling frequency will only be determined by
          roundtrip times.
          However, in order to avoid that a similar case causes too much load
          on the Server, this setting can be used as a protection, to limit the
          polling frequency.
          Default: 0. -->
     <!--
     <min_interpoll_millis>1000</min_interpoll_millis>
     -->

<!--
  ========================
  WEB SERVER CONFIGURATION
  ========================
-->

     <!-- Optional. Page to be returned upon unexpected request URLs.
          This includes reserved URLs used in an incorrect way and request
          URLs related to features that are currently not supported
          or not enabled.
          Default: the proper page is provided by the Server. -->
     <error_page>ErrorPage.html</error_page>

     <!-- Optional. Internal web server configuration -->
     <web_server>

        <!-- Optional. Enabling of the internal web server.
             Can be one of the following:
             - Y: the Server accepts requests for file resources;
             - N: the Server ignores requests for file resources.
             Default: N. -->
        <enabled>Y</enabled>

        <!-- Optional. Path of the file system directory to be used
             by the internal web server as the root for URL path mapping.
             The path is relative to the conf directory.
             Default: ../pages -->
        <!--
        <pages_dir>../pages</pages_dir>
        -->

        <!-- Optional. Caching time, in minutes, to be allowed to the browser
             (through the "expires" HTTP header) for all the resources supplied
             by the internal web server.
             A zero value disables caching by the browser.
             Default: 0. -->
        <!--
        <persistency_minutes>1000000</persistency_minutes>
        -->

        <!-- Optional. Path of the MIME types configuration property file.
             Default: ./mime_types.properties -->
        <!--
        <mime_types_config>./mime_types.properties</mime_types_config>
        -->

        <!-- Optional. Use of the "gzip" content encoding, as defined by the
             HTTP 1.1 specifications, for sending the resource contents.
             It is specified for various cases through the included rules.
             Note that the use of compression for static pages would benefit
             from an internal cache of compressed pages. However, no cache is
             provided, as the internal web server is not meant for production use.
             Default: The "gzip" content encoding is never used. -->
        <use_compression>

            <!-- Optional. Use of the "gzip" content encoding.
                 Can be one of the following:
                 - Y: Gzip compression will be used anytime an HTTP 1.1 response
                      is allowed, provided that the client has declared to support it
                      through the proper http request headers.
                 - N: Causes no specific content encoding to be applied for all kinds
                      of contents.
                 Default: N. -->
            <default>N</default>

            <!-- Optional and cumulative. Through the "value" attribute, specifies
                 whether or not to use the "gzip" content encoding (overriding the
                 setting in "default") when all the conditions specified through
                 the subelements are met.
                 Multiple occurrences of "special_case" are evaluated in sequence,
                 until one is enabled. -->
            <special_case value="Y">
                <!-- Mandatory and cumulative. Defines a condition on the content_type
                     to be used for the response, which should include the string
                     specified through the "contains" attribute. -->
                <content_type contains="text/" />
            </special_case>

        </use_compression>

        <!-- Optional. Size of the resource contents below which compression
             is not applied, regardless of the "use_compression" setting, as we
             guess that no overall benefit would be reached.
             Default: 8192 bytes. -->
        <!--
        <compression_threshold>0</compression_threshold>
        -->

        <!-- Optional. Enabling of the requests for Monitor Console pages.
             These pages are embedded in Lightstreamer Server and get
             monitoring data through the embedded monitoring Data and
             Metadata Providers.
             If the access to the monitoring Adapter Set is restricted
             to specific server sockets or user credentials (see the
             <monitor_provider> element), then access to the Monitor pages
             will be restricted in the same way and a user credential
             submission dialog may be presented by the Server.
             Can be one of the following:
             - Y: the Server accepts requests for monitor pages;
             - N: the Server ignores requests for monitor pages.
             Default: N.
             This setting and the internal web server enabling setting
             are unrelated (e.g. the "enabled" element can be N while the
             "monitor_enabled" element can be Y). -->
        <monitor_enabled>Y</monitor_enabled>

        <!-- Optional. URI reference to map the Monitor Console pages to.
             Default: /monitor/ -->
        <!--
        <monitor_url_path>/monitor/</monitor_url_path>
        -->

        <!-- Optional. Enables the processing of the "/crossdomain.xml" URL,
             required by the Flash player in order to allow pages from
             a different host to request data to Lightstreamer Server host.
             See the "WebSite Controls" section on
             http://www.adobe.com/devnet/flashplayer/articles/flash_player_9_security.pdf
             for details on the contents of the document to be returned.
             Can be one of the following:
             - Y: The Server accepts requests for "/crossdomain.xml";
                  the file configured through the "flex_crossdomain_path"
                  setting is returned.
                  Setting the internal web server enabling setting as "Y"
                  is not needed; note that if the internal web server is
                  enabled, the processing of the "/crossdomain.xml" URL is
                  different than the processing of the other URLs.
             - N: No special processing for the "/crossdomain.xml" requests
                  is performed.
                  Note that if the internal web server is enabled, then the
                  processing of the "/crossdomain.xml" URL is performed as for
                  any other URL (i.e. a file named "crossdomain.xml" is looked
                  for in the directory configured as the root for URL path
                  mapping).
             Note that "/crossdomain.xml" is also used by the Silverlight
             runtime when "/clientaccesspolicy.xml" is not provided.
             Default: N.
             Native Flex clients are supported in Presto and Vivace Editions
             only. -->
        <!--
        <flex_crossdomain_enabled>Y</flex_crossdomain_enabled>
        -->

        <!-- Mandatory when "flex_crossdomain_enabled" is set as "Y".
             Path of the file to be returned upon requests for the
             "/crossdomain.xml" URL. It is ignored when
             "flex_crossdomain_enabled" is not set as "Y".
             The file path is relative to the conf directory.
             Native Flex clients are supported in Presto and Vivace Editions
             only. -->
        <!--
        <flex_crossdomain_path>flexcrossdomain.xml</flex_crossdomain_path>
        -->

        <!-- Optional. Enables the processing of the "/clientaccesspolicy.xml"
             URL, required by the Silverlight runtime in order to allow pages
             from a different host to request data to Lightstreamer Server host.
             See http://msdn.microsoft.com/en-us/library/cc838250(VS.95).aspx#crossdomain_communication
             for details on the contents of the document to be returned.
             Can be one of the following:
             - Y: The Server accepts requests for "/clientaccesspolicy.xml";
                  the file configured through the "silverlight_accesspolicy_path"
                  setting is returned.
                  Setting the internal web server enabling setting as "Y"
                  is not needed; note that if the internal web server is
                  enabled, the processing of the "/clientaccesspolicy.xml" URL
                  is different than the processing of the other URLs.
             - N: No special processing for the "/clientaccesspolicy.xml"
                  requests is performed.
                  Note that if the internal web server is enabled, then the
                  processing of the "/clientaccesspolicy.xml" URL is performed
                  as for any other URL (i.e. a file named "clientaccesspolicy.xml"
                  is looked for in the directory configured as the root for
                  URL path mapping).
             Note that "/crossdomain.xml" is also used by the Silverlight
             runtime when "/clientaccesspolicy.xml" is not provided.
             Default: N.
             Silverlight clients are supported in Presto and Vivace Editions
             only. -->
        <!--
        <silverlight_accesspolicy_enabled>Y</silverlight_accesspolicy_enabled>
        -->

        <!-- Mandatory when "silverlight_accesspolicy_enabled" is set as "Y".
             Path of the file to be returned upon requests for the
             "/clientaccesspolicy.xml" URL. It is ignored when
             "silverlight_accesspolicy_enabled" is not set as "Y".
             The file path is relative to the conf directory.
             Silverlight clients are supported in Presto and Vivace Editions
             only. -->
        <!--
        <silverlight_accesspolicy_path>silverlightaccesspolicy.xml</silverlight_accesspolicy_path>
        -->

     </web_server>

<!--
  ========================
  CLUSTERING CONFIGURATION
  ========================
-->

     <!-- Optional. Host address to be used for control/poll/rebind connections.
          A numeric IP address can be specified as well.
          This setting can be used in case a cluster of Server instances is in
          place, to ensure that all client requests pertaining to the same session
          are issued against the same Server instance. If the Load Balancer can
          ensure that all requests coming from the same client are always routed
          to the same Server instance, then this setting is not needed.
          Note: When this setting is used, clients based on the JavaScript Client
          Library should invoke ConnectionOptions.setEarlyWSOpenEnabled with false,
          to improve startup performances.
          In case a request comes from a web client and <control_link_machine_name>
          is also specified, the latter setting may be applied instead; see the
          comment for <control_link_machine_name> for details. -->
     <!--
     <control_link_address>push1.mycompany.com</control_link_address>
     -->

     <!-- Optional. Host name to be used, in addition to the domain name specified
          on the front-end pages, for control/poll/rebind connections coming
          from web clients.
          This setting will override the <control_link_address> setting when the
          request comes from a web client and the access to Server data pages
          requires that the latter share a common subdomain with application pages.
          See the Client Guide in the JavaScript SDK for details on the cases
          in which this setting will be preferred; note that, in this regard, the
          behavior will be slightly different when the old HTML Client Library is
          in use, so as to ensure backward compatibility.
          This option is useful if the subdomain-name part of the hostname is subject
          to changes or if the same machine needs to be addressed through multiple
          subdomain names (e.g. for multihosting purpose).
          The configured name should contain all the portions of the address except
          for the subdomain name. For example, assuming the "mycompany.com" subdomain
          is declared in the front-end pages:
          - If the full address is "push1.mycompany.com", the name should be "push1";
          - If the full address is "push.int2.cnt3.mycompany.com", the name
            should be "push.int2.cnt3".
          Note: When this setting is used, clients based on the JavaScript Client
          Library should invoke ConnectionOptions.setEarlyWSOpenEnabled with false,
          to improve startup performances. -->
     <!--
     <control_link_machine_name>push1</control_link_machine_name>
     -->

<!--
  ==================
  LOAD CONFIGURATION
  ==================
-->

     <!-- Optional. Maximum number of concurrent client sessions allowed.
          Requests for new sessions received when this limit is currently
          exceeded will be refused; on the other hand, operation on sessions
          already established is not limited in any way.
          Note that closing and reopening a session on a client when this limit
          is currently met may cause the new session request to be refused.
          The limit can be set as a simple, heuristic protection from Server
          overload.
          Default: unlimited. -->
     <!--
     <max_sessions>1000</max_sessions>
     -->

     <!-- Optional. Maximum number of keys allowed for a single NIO selector.
          If more keys have to be processed, new temporary selectors will be
          created. If the value is 0, then no limitations are applied and extra
          selectors will never be created.
          The optimal number of selectors is usually determined by the Server.
          However, because of Sun's bug 6261344 in JDK NIO implementation for
          Windows, assigning more than 1023 keys to a single selector might,
          in some cases, lead to a deadlock, which causes the NIO select call
          to hang. By setting a limit of 1023 or lower, this situation can be
          prevented.
          Default: 1000 on Windows; 0 otherwise.
     -->
     <!--
     <selector_max_load>1000</selector_max_load>
     -->

     <!--
          Optional. Size of the "Events" internal thread pool, which is devoted
          to dispatching the update events received from a Data Adapter to the
          proper client sessions, according with each session subscriptions.
          This task does not include blocking operations; however, on
          multiprocessor machines, allocating multiple threads for this task
          may be beneficial.
          Default: The number of available total cores, as detected by the JVM. -->
     <!--
     <events_pool_size>10</events_pool_size>
     -->

     <!--
          Optional. Size of the "Pump" internal thread pool, which is devoted
          to integrating the update events pertaining to each session and to
          creating the update commands for the client, whenever needed.
          This task does not include blocking operations; however, on
          multiprocessor machines, allocating multiple threads for this task
          may be beneficial.
          Default: The number of available total cores, as detected by the JVM. -->
     <!--
     <pump_pool_size>10</pump_pool_size>
     -->

    <!--
        Optional. Maximum number of threads allowed for the "Server" internal
        pool, which is devoted to the management of the client requests.
        This task includes operations that in some cases may turn out
        to be blocking:
        - getInetAddress
        - socket close
        - calls to a Metadata Adapter that may need to access to some
          external resource (i.e. mainly notifyUser, getItems, getSchema;
          other methods should be implemented as nonblocking, by leaning
          on data cached by notifyUser)
        - calls to a Data Adapter that may need to access to some
          external resource (i.e. subscribe and unsubscribe, though it
          should always be possible to implement such calls asynchronously)
        - file access by the internal web server, though it should be used
          only in demo and test scenarios
        Note that specific thread pools can optionally be defined in order
        to handle some of the tasks that, by default, are handled by the
        "Server" thread pool. They are defined in "adapters.xml"; see the
        predeployed demos' "adapters.xml" file for details.
        A zero value means a potentially unlimited number of threads.
        Default: The number of available total cores, as detected by the JVM,
        or 10, if the number of cores is less. -->
    <!--
    <server_pool_max_size>100</server_pool_max_size>
    -->

    <!--
        Optional, but mandatory if "server_pool_max_size" is set to 0.
        Maximum number of idle threads allowed for the "Server" internal
        pool, which is devoted to the management of the client requests.
        Put in a different way, it is the minimum number of threads that can
        be present in the pool. To accomplish this setting, at pool
        initialization, suitable idle threads are created; then, each time
        a thread becomes idle, it is discarded only if enough threads are
        already in the pool.
        It must not be greater than "server_pool_max_size" (unless the latter
        is set to 0, i.e. unlimited); however, it may be lower, in case
        "server_pool_max_size" is kept high in order to face request bursts;
        a zero value means no idle threads allowed in the pool, though this
        is not recommended for performance reasons.
        Default: The same as "server_pool_max_size", unless the latter
        is set to 0, i.e. unlimited, in which case this setting is mandatory. -->
    <!--
    <server_pool_max_free>0</server_pool_max_free>
    -->

    <!--
        Optional. Maximum number of tasks allowed to be queued to enter the
        "Server" thread pool while accepting new incoming connection requests.
        As long as the number is exceeded, the accept loops of all the listening
        sockets will be kept waiting.
        If any dedicated pools are defined in "adapters.xml" to override the
        "Server" pool, their queues are not considered.
        A negative value disables the check.
        Default: -1. -->
    <!--
    <server_pool_max_queue>100</server_pool_max_queue>
    -->

    <!--
        Optional. Size of the "TLS/SSL Handshake" internal pool, which is
        devoted to the management of operations needed to accomplish TLS/SSL
        hadshakes on the listening sockets specified through "https_server".
        In particular, this pool is only used when the socket is not configured
        to request the client certificate; in this case, the tasks are not
        expected to be blocking.
        Default: 1. -->
    <!--
    <handshake_pool_size>10</handshake_pool_size>
    -->

    <!--
        Optional. Maximum number of tasks allowed to be queued to enter the
        "TLS/SSL Handshake" thread pool while accepting new incoming TLS/SSL
        connection requests.
        The setting only affects the listening sockets specified through
        "https_server" that are not configured to request the client
        certificate; as long as the number is exceeded, the accept loops of
        these sockets will be kept waiting.
        A negative value disables the check.
        Default: -1. -->
    <!--
    <handshake_pool_max_queue>100</handshake_pool_max_queue>
    -->

    <!--
        Optional. Maximum number of threads allowed for the "TLS/SSL Auth"
        internal pool, which is used instead of the "TLS/SSL Handshake" pool
        for listening sockets that are configured to request the client
        certificate. This kind of task may exhibit a blocking behavior in some
        cases.
        A zero value means a potentially unlimited number of threads.
        Default: The same as configured for the "Server" thread pool. -->
    <!--
    <https_auth_pool_max_size>10</https_auth_pool_max_size>
    -->

    <!--
        Optional. Maximum number of idle threads allowed for the "TLS/SSL Auth"
        internal pool, which is used instead of the "TLS/SSL Handshake" pool
        for listening sockets that are configured to request the client
        certificate.
        It behaves in the same way as the "server_pool_max_free" setting.
        Default: The same as configured for the "Server" thread pool. -->
    <!--
    <https_auth_pool_max_free>0</https_auth_pool_max_free>
    -->

    <!--
        Optional. Maximum number of tasks allowed to be queued to enter the
        "TLS/SSL Auth" thread pool while accepting new incoming TLS/SSL
        connection requests.
        The setting only affects the listening sockets specified through
        "https_server" that are configured to request the client certificate;
        as long as the number is exceeded, the accept loops of these sockets
        will be kept waiting.
        A negative value disables the check.
        Default: -1. -->
    <!--
    <https_auth_pool_max_queue>100</https_auth_pool_max_queue>
    -->

    <!--
        Optional. Policy to be adopted in order to manage the extraction
        of the field values from the item events and their conversion to
        a transferrable format.
        Can be one of the following:
        - Y: causes field conversion to be performed before the events
             are dispatched to the various sessions; this may lead to some
             wasted conversions, in case an event is filtered out later by all
             interested clients or in case a field is not subscribed to by any
             client.
             Note that events which don't provide an iterator (see the Data
             Adapter interface documentation) cannot be managed in this way.
        - N: causes field conversion to be performed only as soon as it is
             needed; in this case, as the same event object may be shared by
             many sessions, some synchronization logic is needed and this may
             lead to poor scaling in case many clients subscribe to the same
             item.
        Default: Y. -->
    <!--
    <force_early_conversions>N</force_early_conversions>
    -->

</lightstreamer_conf>
